#include <iostream>
#include <cstdlib>
#include <ctime>
#include <cmath>
#include <typeinfo>
#include <sstream>

using namespace std;

class A{
    private:
        double * w;
        short len;
    public:
        A(short m){
            len = m;
            w = new double[m];
            for(int i=0; i<m; i++){
                w[i] = rand()%2;
            }
        }
        virtual double const foo (short a) = 0;

        virtual ostream &put(ostream &s) const{
            s << typeid(*this).name() << ", ";
            s << "w=[ ";
            for(int i=0; i<len; i++){
                s << w[i] << " ";
            }
            s << "], ";
            return s;
        }

        short const getLen(){
            return len;
        }
    protected:
        double const get(short i){
            return w[i%len];
        }
};

ostream &operator <<(ostream &os, A &a){
    return a.put(os);
}

class B: public A{
    private:
        int p;
    public:
        B(short m, int x):A(m){}
        double const foo(short a){
            return sum(a)/p;
        }
    protected:
        double const sum(short s){
            double sommatoria = 0;
            for(int i=0; i<getLen(); i++){
                sommatoria += get(i);
            }
            return sommatoria;
        }
    ostream &put (ostream &s) const{
        A::put(s);
        s << "p=" << p << ", ";
        return s;
    }
};
template <typename T> 
class C: public A{
    private:
        T x;
    public:
        C(short n):A(n){
            if(typeid(short)==typeid(x)){
                x=n;
            }
            else{
                x=log(1+sin(pow(n,2)));
            }
        }
        double const foo(short r){
            return g(r);
        }
        T const g(T k){
            return 2*x*(k+1);
        }
    ostream &put(ostream &s) const{
        A::put(s);
        s << "x=" << x << ", ";
        return s;
    }
};

int main(){
    int DIM = 50;

    srand(111222333);
    A *vett[DIM];
    for(int i=0; i<DIM; i++) {
	    short n=1+rand()%10;
	    switch(rand()%3) {
	        case 0: 
	            vett[i]= new B(n, rand()%10 + 1);
	            break;
	        case 1:
	            vett[i]= new C<double>(n);
	            break;
	        case 2: 
	            vett[i]= new C<short>(n);
	    }
    }     

    cout << "PUNTO 1" << endl;
        for(int i=0; i<DIM; i++){
            cout << i << ")" << *vett[i] << "foo(3)=" << vett[i]->foo(3) << endl;
        }
    cout << "PUNTO 2" << endl;
    cout << "PUNTO 3" << endl;
}